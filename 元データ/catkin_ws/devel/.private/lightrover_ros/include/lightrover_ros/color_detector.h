// Generated by gencpp from file lightrover_ros/color_detector.msg
// DO NOT EDIT!


#ifndef LIGHTROVER_ROS_MESSAGE_COLOR_DETECTOR_H
#define LIGHTROVER_ROS_MESSAGE_COLOR_DETECTOR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lightrover_ros
{
template <class ContainerAllocator>
struct color_detector_
{
  typedef color_detector_<ContainerAllocator> Type;

  color_detector_()
    : color_type(0)  {
    }
  color_detector_(const ContainerAllocator& _alloc)
    : color_type(0)  {
  (void)_alloc;
    }



   typedef int8_t _color_type_type;
  _color_type_type color_type;





  typedef boost::shared_ptr< ::lightrover_ros::color_detector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lightrover_ros::color_detector_<ContainerAllocator> const> ConstPtr;

}; // struct color_detector_

typedef ::lightrover_ros::color_detector_<std::allocator<void> > color_detector;

typedef boost::shared_ptr< ::lightrover_ros::color_detector > color_detectorPtr;
typedef boost::shared_ptr< ::lightrover_ros::color_detector const> color_detectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lightrover_ros::color_detector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lightrover_ros::color_detector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lightrover_ros::color_detector_<ContainerAllocator1> & lhs, const ::lightrover_ros::color_detector_<ContainerAllocator2> & rhs)
{
  return lhs.color_type == rhs.color_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lightrover_ros::color_detector_<ContainerAllocator1> & lhs, const ::lightrover_ros::color_detector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lightrover_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lightrover_ros::color_detector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lightrover_ros::color_detector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lightrover_ros::color_detector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lightrover_ros::color_detector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lightrover_ros::color_detector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lightrover_ros::color_detector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lightrover_ros::color_detector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28ff8e773f1e211eaff66787abb1695e";
  }

  static const char* value(const ::lightrover_ros::color_detector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28ff8e773f1e211eULL;
  static const uint64_t static_value2 = 0xaff66787abb1695eULL;
};

template<class ContainerAllocator>
struct DataType< ::lightrover_ros::color_detector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lightrover_ros/color_detector";
  }

  static const char* value(const ::lightrover_ros::color_detector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lightrover_ros::color_detector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 color_type\n"
;
  }

  static const char* value(const ::lightrover_ros::color_detector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lightrover_ros::color_detector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.color_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct color_detector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lightrover_ros::color_detector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lightrover_ros::color_detector_<ContainerAllocator>& v)
  {
    s << indent << "color_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.color_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIGHTROVER_ROS_MESSAGE_COLOR_DETECTOR_H
