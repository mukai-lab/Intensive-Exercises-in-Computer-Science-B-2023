#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

odom_x, odom_y, odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
    global odom_x, odom_y, odom_theta 
    odom_x = msg.pose.pose.position.x  
    odom_y = msg.pose.pose.position.y  
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    odom_theta = e[2]

def callback_laser(msg):
    global ranges
    ranges = msg.ranges
    #print(ranges[180])
    #ex4-1.speed down(0.05->0.01)
    #speed.linear.x=0.01

    #print(min(ranges))
    #min_ind = ranges.index(min(ranges))
    #print(min(ranges))
    min_val = 100000
    for i in ranges:
        if(i>0 and min_val>i):
            min_val = i
    print(min_val)
    min_ind = ranges.index(min_val)
    if(min_val>=0.5):
        speed.angular.z=0
        speed.linear.x=0
    elif(min_ind>90 and min_ind<=170):
        speed.angular.z = -1
    elif(170<min_ind and min_ind<190):
        speed.angular.z = 0
        #if(ranges[min_ind]>=0.5):
           # speed.linear.x=0
        if(0.24<ranges[min_ind] and ranges[min_ind]<0.26):
            speed.linear.x=0
        elif(ranges[180]>=0.26):
            speed.linear.x=0.05
        else:
            speed.linear.x=-0.05
    else:
        speed.angular.z = 1
    #ex5
    '''if(ranges[min_ind]>=0.5):
        speed.linear.x=0
        speed.angular.z=0
    elif(0.24<ranges[min_ind] and ranges[min_ind]<0.26):
        speed.linear.x=0
    elif(ranges[180]>=0.26):
        speed.linear.x=0.05
    else:
        speed.linear.x=-0.05'''


def controller():
    '''global speed
    #ex4-1.speed down(0.05->0.01)
    speed.linear.x=0.01
    print(odom_x)
    if(odom_x>=0.1):
        speed.linear.x=0'''





def rover_controller():
    global speed

    rospy.init_node('rover_controller', anonymous=True)

    pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

    rate = rospy.Rate(5)
        
    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
    lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

    while not rospy.is_shutdown():
        rate.sleep()
        controller()
        pub.publish(speed)

if __name__ == '__main__':
    rover_controller()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

odom_x, odom_y, odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
    global odom_x, odom_y, odom_theta 
    odom_x = msg.pose.pose.position.x  
    odom_y = msg.pose.pose.position.y  
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    odom_theta = e[2]

def callback_laser(msg):
    global ranges
    ranges = msg.ranges
    #print(ranges[180])
    #ex4-1.speed down(0.05->0.01)
    #speed.linear.x=0.01

    #print(min(ranges))
    #min_ind = ranges.index(min(ranges))
    #print(min(ranges))
    min_val = 100000
    for i in ranges:
        if(i>0 and min_val>i):
            min_val = i
    print(min_val)
    min_ind = ranges.index(min_val)
    if(min_val>=0.5):
        speed.angular.z=0
        speed.linear.x=0
    elif(min_ind>90 and min_ind<=170):
        speed.angular.z = -1
    elif(170<min_ind and min_ind<190):
        speed.angular.z = 0
        #if(ranges[min_ind]>=0.5):
           # speed.linear.x=0
        if(0.24<ranges[min_ind] and ranges[min_ind]<0.26):
            speed.linear.x=0
        elif(ranges[180]>=0.26):
            speed.linear.x=0.05
        else:
            speed.linear.x=-0.05
    else:
        speed.angular.z = 1
    #ex5
    '''if(ranges[min_ind]>=0.5):
        speed.linear.x=0
        speed.angular.z=0
    elif(0.24<ranges[min_ind] and ranges[min_ind]<0.26):
        speed.linear.x=0
    elif(ranges[180]>=0.26):
        speed.linear.x=0.05
    else:
        speed.linear.x=-0.05'''


def controller():
    '''global speed
    #ex4-1.speed down(0.05->0.01)
    speed.linear.x=0.01
    print(odom_x)
    if(odom_x>=0.1):
        speed.linear.x=0'''





def rover_controller():
    global speed

    rospy.init_node('rover_controller', anonymous=True)

    pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

    rate = rospy.Rate(5)
        
    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
    lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

    while not rospy.is_shutdown():
        rate.sleep()
        controller()
        pub.publish(speed)

if __name__ == '__main__':
    rover_controller()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

odom_x, odom_y, odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
    global odom_x, odom_y, odom_theta 
    odom_x = msg.pose.pose.position.x  
    odom_y = msg.pose.pose.position.y  
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    odom_theta = e[2]

def callback_laser(msg):
    global ranges
    ranges = msg.ranges
    #print(ranges[180])
    #ex4-1.speed down(0.05->0.01)
    #speed.linear.x=0.01

    #print(min(ranges))
    #min_ind = ranges.index(min(ranges))
    #print(min(ranges))
    min_val = 100000
    for i in ranges:
        if(i>0 and min_val>i):
            min_val = i
    print(min_val)
    min_ind = ranges.index(min_val)
    if(min_val>=0.5):
        speed.angular.z=0
        speed.linear.x=0
    elif(min_ind>90 and min_ind<=170):
        speed.angular.z = -1
    elif(170<min_ind and min_ind<190):
        speed.angular.z = 0
        #if(ranges[min_ind]>=0.5):
           # speed.linear.x=0
        if(0.24<ranges[min_ind] and ranges[min_ind]<0.26):
            speed.linear.x=0
        elif(ranges[180]>=0.26):
            speed.linear.x=0.05
        else:
            speed.linear.x=-0.05
    else:
        speed.angular.z = 1
    #ex5
    '''if(ranges[min_ind]>=0.5):
        speed.linear.x=0
        speed.angular.z=0
    elif(0.24<ranges[min_ind] and ranges[min_ind]<0.26):
        speed.linear.x=0
    elif(ranges[180]>=0.26):
        speed.linear.x=0.05
    else:
        speed.linear.x=-0.05'''


def controller():
    '''global speed
    #ex4-1.speed down(0.05->0.01)
    speed.linear.x=0.01
    print(odom_x)
    if(odom_x>=0.1):
        speed.linear.x=0'''





def rover_controller():
    global speed

    rospy.init_node('rover_controller', anonymous=True)

    pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

    rate = rospy.Rate(5)
        
    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
    lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

    while not rospy.is_shutdown():
        rate.sleep()
        controller()
        pub.publish(speed)

if __name__ == '__main__':
    rover_controller()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

odom_x, odom_y, odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
    global odom_x, odom_y, odom_theta 
    odom_x = msg.pose.pose.position.x  
    odom_y = msg.pose.pose.position.y  
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    odom_theta = e[2]

def callback_laser(msg):
    global ranges
    ranges = msg.ranges
    #print(ranges[180])
    #ex4-1.speed down(0.05->0.01)
    #speed.linear.x=0.01

    #print(min(ranges))
    #min_ind = ranges.index(min(ranges))
    #print(min(ranges))
    min_val = 100000
    for i in ranges:
        if(i>0 and min_val>i):
            min_val = i
    print(min_val)
    min_ind = ranges.index(min_val)
    if(min_val>=0.5):
        speed.angular.z=0
        speed.linear.x=0
    elif(min_ind>90 and min_ind<=170):
        speed.angular.z = -1
    elif(170<min_ind and min_ind<190):
        speed.angular.z = 0
        #if(ranges[min_ind]>=0.5):
           # speed.linear.x=0
        if(0.24<ranges[min_ind] and ranges[min_ind]<0.26):
            speed.linear.x=0
        elif(ranges[180]>=0.26):
            speed.linear.x=0.05
        else:
            speed.linear.x=-0.05
    else:
        speed.angular.z = 1
    #ex5
    '''if(ranges[min_ind]>=0.5):
        speed.linear.x=0
        speed.angular.z=0
    elif(0.24<ranges[min_ind] and ranges[min_ind]<0.26):
        speed.linear.x=0
    elif(ranges[180]>=0.26):
        speed.linear.x=0.05
    else:
        speed.linear.x=-0.05'''


def controller():
    '''global speed
    #ex4-1.speed down(0.05->0.01)
    speed.linear.x=0.01
    print(odom_x)
    if(odom_x>=0.1):
        speed.linear.x=0'''





def rover_controller():
    global speed

    rospy.init_node('rover_controller', anonymous=True)

    pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

    rate = rospy.Rate(5)
        
    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
    lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

    while not rospy.is_shutdown():
        rate.sleep()
        controller()
        pub.publish(speed)

if __name__ == '__main__':
    rover_controller()
