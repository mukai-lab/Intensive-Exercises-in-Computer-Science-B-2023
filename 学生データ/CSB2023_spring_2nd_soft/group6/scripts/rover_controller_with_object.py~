#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan
import numpy as np
import math

_odom_x, _odom_y, _odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
        global _odom_x, _odom_y, _odon_theta 
        _odom_x = msg.pose.pose.position.x  
        _odom_y = msg.pose.pose.position.y  
        qx = msg.pose.pose.orientation.x
        qy = msg.pose.pose.orientation.y
        qz = msg.pose.pose.orientation.z
        qw = msg.pose.pose.orientation.w
        q = (qx, qy, qz, qw)
        e = euler_from_quaternion(q)
        _odom_theta = e[2]

'''
def weight1(x):
        return 0.3 / x

def weight2(x):
        return -(0.3 / x)
'''

def weight3(x):
        return 1-x

def sigmoid(x):
        sig = 1 / (1+10**(-x))
        return sig
    
def callback_laser(msg):
        global ranges
        ranges = msg.ranges
        speed.linear.x = 0.05

        #speed.angular.z = weight1(ranges[150]) + weight1(ranges[170]) + weight2(ranges[190]) + weight2(ranges[210])
        speed.angular.z = weight3(ranges[150])  + weight3(ranges[170]) - weight3(ranges[190]) - weight3(ranges[210])
        
        speed.linear.x = (sigmoid(ranges[170]) - 0.5) / 20 + (sigmoid(ranges[190]) - 0.5) / 20 + (sigmoid(ranges[150]) - 0.5) / 20 + (sigmoid(ranges[210]) - 0.5) / 20
        
        print("角度：",speed.angular.z)
        print("速さ:",speed.linear.x)
        
        """ 
        speed.linear.x = 0.1
        if(ranges[160] < 0.2):
                speed.angular.z = 1.5
                speed.linear.x = 0
        elif(ranges[170] < 0.4):
                speed.angular.z = 1.5
                speed.linear.x = 0
        elif(ranges[190] < 0.4):
                speed.angular.z = -1
                speed.linear.x = 0
        elif(ranges[200] < 0.2):
                speed.angular.z = -1
                speed.linear.x = 0
        else:
                speed.angular.z = 0
                speed.linear.x = 0.1"""



def pos_controller():
        global speed



      

def rover_controller():
        global speed

        rospy.init_node('rover_controller', anonymous=True)

        pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

        rate = rospy.Rate(5)
        
        odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
        lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

        while not rospy.is_shutdown():
                pos_controller()
                pub.publish(speed)
                rate.sleep()

if __name__ == '__main__':
        rover_controller()
