#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#roslaunch lightrover_ros controller.launch


import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

odom_x, odom_y, odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
    global odom_x, odom_y, odom_theta 
    odom_x = msg.pose.pose.position.x  
    odom_y = msg.pose.pose.position.y  
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    odom_theta = e[2]
    
def callback_laser(msg):
#0.232,0.234,0.229,0.241,0.238,0.238,0.236,0.232,0.229,0.228
    #s=0.00444
    
    global ranges
    global speed
    ranges = msg.ranges
    '''
    n=0
    for i in ranges:
        if i<0.50 and i>0.0:
            print(n,i)
        n+=1
    
    for i in range(200,230):
        print(i,ranges[i])
    '''
    speed.linear.x = 0.0
    
    speed.angular.z = 0.0

    if ranges[205] > 0.25 + speed.linear.x:
        speed.linear.x = 0.05
    
    elif ranges[205] < 0.25:
        speed.linear.x = -0.05

    elif ranges[205] <= 0.25 + speed.linear.x:
        speed.linear.x = 0.01
    
    elif ranges[205] <= 0.25 and speed.linear.x != 0.0:
         speed.linear.x = 0.0
         print(ranges[205])
    
    
#147~240madenasi
    min = 100.0
    min_index = -1
    for i in range(135,275):
        if ranges[i] > 0.0 and min < ranges[i]:
            min = ranges[i]
            min_index = i

    if min <= 0.25:
        speed.linear.x = -0.01
    else speed.linear.x = 0.01

    #kakudo rad/s


    #kyori

    
            
def controller():
    global speed
#11.0,11.6,12.0,12.0,12.0,12.8,28.0,12.1,25.8,11.3
#    bef_x=odom_x
#   s=6.38526 n=10
#   s=0.48808 hazureti nakusita

'''    
    speed.linear.x = 0.05
    speed.angular.z = 0.0
    
    if odom_x + speed.linear.x >= 0.1:
         speed.linear.x = 0.01

    if odom_x >= 0.1:
         speed.linear.x = 0.00
    print(odom_x)

'''

def rover_controller():
    
    global speed

    rospy.init_node('rover_controller', anonymous=True)

    pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

    rate = rospy.Rate(5)
        
    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
    lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

    while not rospy.is_shutdown():
        rate.sleep()
        controller()
        pub.publish(speed)

if __name__ == '__main__':
    rover_controller()
