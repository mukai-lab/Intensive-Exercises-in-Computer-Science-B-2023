#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

_odom_x, _odom_y, _odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
        global _odom_x, _odom_y, _odon_theta 
        _odom_x = msg.pose.pose.position.x  
        _odom_y = msg.pose.pose.position.y  
        qx = msg.pose.pose.orientation.x
        qy = msg.pose.pose.orientation.y
        qz = msg.pose.pose.orientation.z
        qw = msg.pose.pose.orientation.w
        q = (qx, qy, qz, qw)
        e = euler_from_quaternion(q)
        _odom_theta = e[2] 
    
    
def callback_laser(msg):
        global ranges
        ranges = msg.ranges
        speed.linear.x = 0.05
        if(0.2 >= ranges[190]):
            speed.linear.x = 0.0
            speed.angular.z = -2.5
        elif(0.2 <= ranges[140]):
                speed.angular.z = 0.85
        #elif(0.3 >= ranges[170]):
         #       speed.angular.z = 0.0
        #elif(0.3 <= ranges[170]):
         #      speed.angular.z = 0.5
        elif(0.2 >= ranges[140]):
                speed.angular.z = -0.04
        elif(0.2 <= ranges[190]):
            speed.linear.x = 0.05
            speed.angular.z = 0.0


            
        #elif(0.1 >= ranges[140]):
            #speed.angular.z = -0.1
        #elif(0.2 <= ranges[140]):
           # speed.angular.z = 0.1
        #if(0.25 >= ranges[170]):
             #speed.angular.z = 0.7
        #elif(0.25 >= ranges[210]):
            #speed.angular.z = -0.7
        #elif(0.25 >= ranges[150]):
            #speed.angular.z = 0.35
        #elif(0.25 >= ranges[230]):
            #speed.angular.z = -0.35

       # speed.linear.x = 0.02*ranges[150] + 0.02*ranges[170] + 0.02*ranges[210] + 0.02*ranges[230]
       # speed.angular.z = -0.4*ranges[150] - 0.7*ranges[170] + 0.7*ranges[210] + 0.4*ranges[230]
       




def pos_controller():
        global speed



      

def rover_controller():
        global speed

        rospy.init_node('rover_controller', anonymous=True)

        pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

        rate = rospy.Rate(5)
        
        odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
        lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

        while not rospy.is_shutdown():
                pos_controller()
                pub.publish(speed)
                rate.sleep()

if __name__ == '__main__':
        rover_controller()
