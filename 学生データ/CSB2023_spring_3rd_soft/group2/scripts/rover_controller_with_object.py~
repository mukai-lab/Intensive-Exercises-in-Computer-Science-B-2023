#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

_odom_x, _odom_y, _odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
        global _odom_x, _odom_y, _odon_theta 
        _odom_x = msg.pose.pose.position.x  
        _odom_y = msg.pose.pose.position.y  
        qx = msg.pose.pose.orientation.x
        qy = msg.pose.pose.orientation.y
        qz = msg.pose.pose.orientation.z
        qw = msg.pose.pose.orientation.w
        q = (qx, qy, qz, qw)
        e = euler_from_quaternion(q)
        _odom_theta = e[2] 
    
    
def callback_laser(msg):
        global ranges
        ranges = msg.ranges

        linear_w = [0.03, 0.03, 0.03, 0.03]
        angular_w = [4.0, 6.0, -6.0, -4.0]
        front = [ranges[225], ranges[205], ranges[185], ranges[165]]

        speed_x = 0
        angular_z=0
        for i in range(4):
            speed_x += front[i] * linear_w[i]
            angular_z += front[i] * angular_w[i]
        speed.linear.x = speed_x - 0.02
        speed.angular.z = angular_z
        print("speed: ",speed.linear.x)
        print("angular: ",speed.angular.z)
        #print(ranges[228])



        '''if front[0] < 0.3 or front[1] < 0.3:
            if front[2] < 0.3  or front[3] < 0.3:
                speed.angular.z = 1.0
                
            else:

                speed.angular.z = -1.0
                
        elif front[2] < 0.3 or front[3] < 0.3:
            speed.angular.z = 1.0
            
        else:
            speed.angular.z = 0
            speed.linear.x = 0.05'''
            
        


def pos_controller():
        global speed



      

def rover_controller():
        global speed

        rospy.init_node('rover_controller', anonymous=True)

        pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

        rate = rospy.Rate(5)
        
        odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
        lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

        while not rospy.is_shutdown():
                pos_controller()
                pub.publish(speed)
                rate.sleep()

if __name__ == '__main__':
        rover_controller()

        
