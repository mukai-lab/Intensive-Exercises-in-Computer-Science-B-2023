#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

_odom_x, _odom_y, _odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
        global _odom_x, _odom_y, _odon_theta 
        _odom_x = msg.pose.pose.position.x  
        _odom_y = msg.pose.pose.position.y  
        qx = msg.pose.pose.orientation.x
        qy = msg.pose.pose.orientation.y
        qz = msg.pose.pose.orientation.z
        qw = msg.pose.pose.orientation.w
        q = (qx, qy, qz, qw)
        e = euler_from_quaternion(q)
        _odom_theta = e[2] 
    
    
def callback_laser(msg):
        global speed
        global ranges
        ranges = msg.ranges

        bar_1 = ranges[163]
        bar_2 = ranges[173]
        bar_3 = ranges[193]
        bar_4 = ranges[203]
        if bar_1 > 0.28:
            bar_1 = 0.0
        else:
            bar_1 = 0.28 - bar_1
            
        if bar_2 > 0.28:
            bar_2 = 0.0
        else:
            bar_2 = 0.30 - bar_2
            
        if bar_3 > 0.28:
            bar_3 = 0.0
        else:
            bar_3 = 0.28 - bar_3
            
        if bar_4 > 0.28:
            bar_4 = 0.0
        else:
            bar_4 = 0.28 - bar_4
        

        anguz = [2.5,4.5,-4.5,-2.5]
        linex = [-0.20,-0.33,-0.33,-0.20]

        speed.linear.x = bar_1*linex[0]+bar_2*linex[1]+bar_3*linex[2]+bar_4*linex[3] + 0.07
        
        speed.angular.z = bar_1*anguz[0]+bar_2*anguz[1]+bar_3*anguz[2]+bar_4*anguz[3]

        if speed.linear.x > 0.1:
            speed.linear.x = 0.1
        elif speed.linear.x < 0.0:
            speed.linear.x = 0.0
            
        if speed.angular.z > 0.34:
            speed.angular.z = 0.34
        elif speed.angular.z < -0.34:
            speed.angular.z = -0.34


def pos_controller():
        global speed



      

def rover_controller():
        global speed

        rospy.init_node('rover_controller', anonymous=True)

        pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

        rate = rospy.Rate(5)
        
        odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
        lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

        while not rospy.is_shutdown():
                pos_controller()
                pub.publish(speed)
                rate.sleep()

if __name__ == '__main__':
        rover_controller()
