#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

import time
import numpy as np

odom_x, odom_y, odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()
front_dist = 0
obj_dire = 0

def callback_odom(msg):
    global odom_x, odom_y, odom_theta 
    odom_x = msg.pose.pose.position.x  
    odom_y = msg.pose.pose.position.y  
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    odom_theta = e[2]
    
def callback_laser(msg):
    R = 15
    global ranges, front_dist, obj_dire
    ranges = msg.ranges
    #front =  ranges[182]
    front = np.array(ranges[182 - R:182 + R], dtype=np.float64)
    #print(*(f"{e:.2}" for e in front))
    obj_dire = np.average(np.where(front < 0.5)[0]) - R
    if not np.isnan(obj_dire):
        front_dist = ranges[int(np.round(obj_dire) + 182)]
    else:
        front_dist = None
    print(f"dist: {front_dist}, dire: {obj_dire}")


odom_x_init = None
def ex1():
    global speed, odom_x_init
    print(odom_x)
    if odom_x_init is None:
        odom_x_init = odom_x
    if abs(odom_x_init - odom_x) < 0.1:
        speed.linear.x = 0.05
    else:
        speed.linear.x = 0
    
def ex2():
    print(f"front dist: {front_dist}")


def ex3():
    global speed
    print(f"front dist: {front_dist}")
    if front_dist > 0.25:
        speed.linear.x = 0.5
    else:
        speed.linear.x = 0

def ex4():
    global speed
    if front_dist > 0.3:
        speed.linear.x = 0.05
    elif abs(front_dist - 0.25) < 0.05:
        speed.linear.x = (front_dist - 0.25)
    else:
        speed.linear.x = 0
    print(f"dist:{front_dist}, speed: {speed.linear.x}")

def ex5():
    global speed
    diff = front_dist - 0.25
    if diff > 0:
        speed.linear.x = min(diff, 0.05)
    else:
        speed.linear.x = -min(-diff, 0.05)
    print(f"dist:{front_dist}, speed: {speed.linear.x}")

def ex6():
    global speed
    print(front_dist, obj_dire)
    if front_dist is None: return
    dist_diff = front_dist - 0.25
    if dist_diff > 0:
        speed.linear.x = min(dist_diff, 0.05)
    else:
        speed.linear.x = -min(-dist_diff, 0.05)
    speed.angular.z = obj_dire / 40

def controller():
    ex6()





def rover_controller():
    global speed

    rospy.init_node('rover_controller', anonymous=True)

    pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

    rate = rospy.Rate(5)
        
    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
    lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)
    
    while not rospy.is_shutdown():
        rate.sleep()
        controller()
        pub.publish(speed)

if __name__ == '__main__':
    rover_controller()
