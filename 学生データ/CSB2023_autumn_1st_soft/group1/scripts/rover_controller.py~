#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

odom_x, odom_y, odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()
length = 0
count = 0

def callback_odom(msg):
    global odom_x, odom_y, odom_theta 
    odom_x = msg.pose.pose.position.x  
    odom_y = msg.pose.pose.position.y  
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    odom_theta = e[2]
    
def callback_laser(msg):
    global ranges
    global length
    global speed
    ranges = msg.ranges
    #2 for i in range(0,36):    
        #2 print(str(i*7) + ' ' +str(ranges[7 * i]))
    #3 length = ranges[189]
    print(ranges[189])
    #3 speed.linear.x = 0.01
    #3 if length < 0.25:
        #3 speed.linear.x = 0
        
    #5 sp = ranges[189] - 0.25
    #5 if ranges[189] == 0:
        #5 speed.linear.x = 0
    #5 else:
        #5 if -0.1 < sp < 0.1:
            #5 speed.linear.x = sp
        #5 if sp > 0.1:
            #5 speed.linear.x = 0.1
        #5 if sp < -0.1:
            #5 speed.linear.x = -0.1
    min_length = 343
    min_id = 189
    for i in range(0,249):
        if ranges[i] > 0:
            if min_length > ranges[i]:
                min_length = ranges[i]
                min_id = i
            
    #speed.angular.z = (189 - min_id) * (-0.02)
    #sp = ranges[min_id] - 0.25 
    #if -0.1 < sp < 0.1:
    #   speed.linear.x = sp
    #if 0.1 < sp < 0.25:
    #    speed.linear.x = 0.1
    #if sp < -0.1:
    #    speed.linear.x = -0.1
    #if sp > 0.25:
    #    speed.linear.x = 0


def controller():
    global speed
    global ranges
    global count
    global length
    speed.linear.x = 0.05
    #1 speed.angular.z = 0.0
    #1 print(odom_x)
    #1 if odom_x > 0.1:
        #1 speed.linear.x = 0





def rover_controller():
    global speed

    rospy.init_node('rover_controller', anonymous=True)

    pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

    rate = rospy.Rate(5)
        #ロボットの位置測定？
    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
    lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

    while not rospy.is_shutdown():
        rate.sleep()
        controller()
        pub.publish(speed)

if __name__ == '__main__':
    rover_controller()
