#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan
import numpy as np

_odom_x, _odom_y, _odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
        global _odom_x, _odom_y, _odon_theta 
        _odom_x = msg.pose.pose.position.x  
        _odom_y = msg.pose.pose.position.y  
        qx = msg.pose.pose.orientation.x
        qy = msg.pose.pose.orientation.y
        qz = msg.pose.pose.orientation.z
        qw = msg.pose.pose.orientation.w
        q = (qx, qy, qz, qw)
        e = euler_from_quaternion(q)
        _odom_theta = e[2] 
    
    
def callback_laser(msg):
        global ranges
        ranges = msg.ranges

        r = np.array([ranges[170], ranges[186], ranges[215], ranges[230]])
        w = np.array([[0.10, 0.2, 0.2, 0.10], [-1.0, -1.5, 1.5, 1.0]])

        #print(ranges[190], ranges[197], ranges[205], ranges[212])

        speed.linear.x = -0.25
        speed.angular.z = 0.0
        for i in range(4):
                speed.linear.x += r[i] * w[0][i]
                speed.angular.z += (r[i] + 0.01) * w[1][i]

        print(speed.linear.x, speed.angular.z)

        speed.linear.x = max(0.0, min(0.1, speed.linear.x))
        speed.angular.z = min(0.3, speed.angular.z)

def pos_controller():
        global speed



      

def rover_controller():
        global speed

        rospy.init_node('rover_controller', anonymous=True)

        pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

        rate = rospy.Rate(5)
        
        odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
        
        lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

        while not rospy.is_shutdown():
                pos_controller()
                pub.publish(speed)
                rate.sleep()

if __name__ == '__main__':
        rover_controller()
