#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

_odom_x, _odom_y, _odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
        global _odom_x, _odom_y, _odon_theta
        _odom_x = msg.pose.pose.position.x
        _odom_y = msg.pose.pose.position.y
        qx = msg.pose.pose.orientation.x
        qy = msg.pose.pose.orientation.y
        qz = msg.pose.pose.orientation.z
        qw = msg.pose.pose.orientation.w
        q = (qx, qy, qz, qw)
        e = euler_from_quaternion(q)
        _odom_theta = e[2]

def callback_laser(msg):
        global ranges
        ranges = msg.ranges
        r1 = ranges[230]
        r2 = ranges[210]
        r3 = ranges[190]
        r4 = ranges[170]
        speed.linear.x = ((r1-0.2)*0.2+(r2-0.2)*0.3+(r3-0.2)*0.3+(r4-0.2)*0.2)/10
        speed.angular.z = ((1.4-r3)**2*0.2+(1.4-r4)**2*0.29-(1.4-r1)**2*0.3-(1.4-r2)**2*0.2)*20
        if(speed.linear.x > 0.1):
                speed.linear.x = 0.1
        if(speed.angular.z > 0.349):
                speed.angular.z = 0.349
        if(speed.angular.z < -0.349):
                speed.angular.z = -0.349


        
#        kadai5
#        if((ranges[230] < 0.3 or ranges[210] < 0.3) and ranges[240] != 0 and ranges[210] != 0):
#                speed.linear.x = 0.01
#                speed.angular.z = -0.349
#        if((ranges[170] < 0.3 or ranges[190] < 0.3) and ranges[160] != 0 and ranges[190] != 0):
#                speed.linear.x = 0.01
#                speed.angular.z = 0.349
#        if(speed.linear.x > 0.15):
#                speed.linear.x = 0.15
#        if(speed.angular.z > 0.349):
#                speed.angular.z = 0.349




def pos_controller():
        global speed
        


def rover_controller():
        global speed

        rospy.init_node('rover_controller', anonymous=True)

        pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

        rate = rospy.Rate(5)

        odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)

        lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

        while not rospy.is_shutdown():
                pos_controller()
                pub.publish(speed)
                rate.sleep()

if __name__ == '__main__':
        rover_controller()
