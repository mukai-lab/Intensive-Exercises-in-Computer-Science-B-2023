#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan

odom_x, odom_y, odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
    global odom_x, odom_y, odom_theta
    odom_x = msg.pose.pose.position.x
    odom_y = msg.pose.pose.position.y
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    odom_theta = e[2]

def callback_laser(msg):
#    global ranges
#    ranges = msg.ranges
#    print(ranges[200])
#    speed.linear.x = 0.05
#    if(ranges[200] >= 0.50 and ranges[200] != 0.0):
#        speed.linear.x = 0.0
#    if(ranges[200] >= 0.27 and ranges[200] < 0.50 and ranges[200] != 0.0):
#        speed.linear.x = 0.05
#    if(ranges[200] < 0.27 and ranges[200] >= 0.25 and ranges[200] != 0.0):
#        speed.linear.x = 0.01
#    if(ranges[200] < 0.25 and ranges[200] >= 0.23 and ranges[200] != 0.0):
#        speed.linear.x = -0.01
#    if(ranges[200] < 0.23 and ranges[200] != 0.0):
#        speed.linear.x = -0.05
#    min_value = 100
#    min_index = -1
#    for i in range(0, 269):
#        if(ranges[i] == 0):
#            continue
#        if(ranges[i] < min_value):
#            min_value = ranges[i]
#            min_index = i
#    if(min_index > 65 and min_index <= 200):
#        speed.angular.z = -0.34
#    else:
#        speed.angular.z = 0.34
#    for i in range(0, 269):
#        if(ranges[i]<=0.1):
#            print(i)
#            print(ranges[i])
    


def controller():
    global speed
    speed.linear.x = 0.1
    speed.angular.z = 0
#    if(speed.linear.x > 0.15):
#        speed.linear.x = 0.15
#    if(speed.angular.z > 0.349):
#        speed.angular.z = 0.349
#    if(odom_x >= 0.1):
#        speed.linear.x = 0
#        speed.angular.z = 0

    


def rover_controller():
    global speed

    rospy.init_node('rover_controller', anonymous=True)

    pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

    rate = rospy.Rate(5)

    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)

    lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

    while not rospy.is_shutdown():
        rate.sleep()
        controller()
        pub.publish(speed)

if __name__ == '__main__':
    rover_controller()
