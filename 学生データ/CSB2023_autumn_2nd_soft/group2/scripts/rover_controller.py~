#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
import tf
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan
import time

odom_x, odom_y, odom_theta = 0.0, 0.0, 0.0
ranges = []
speed = Twist()

def callback_odom(msg):
    global odom_x, odom_y, odom_theta
    odom_x = msg.pose.pose.position.x
    odom_y = msg.pose.pose.position.y
    qx = msg.pose.pose.orientation.x
    qy = msg.pose.pose.orientation.y
    qz = msg.pose.pose.orientation.z
    qw = msg.pose.pose.orientation.w
    q = (qx, qy, qz, qw)
    e = euler_from_quaternion(q)
    odom_theta = e[2]

def callback_laser(msg):
    global ranges
    ranges = msg.ranges
    """list = []
    for i,range in enumerate(ranges):
        if range < 0.2 and range != 0.0:
            list.append()
    if len(list):
        print(sum(list)/len(list))"""


def controller():
    global speed, ranges
    if ranges:
        r_ave = sum(ranges[130:155]) / len(ranges[130:155])
        b_ave = sum(ranges[40:110]) / len(ranges[40:110])
        l_ave = (sum(ranges[235:260]) + sum(ranges[0:20])) / (
            len(ranges[235:260]) + len(ranges[0:20])
        )
        f_ave = sum(ranges[175:215]) / len(ranges[175:215])
        print(f"r: {r_ave}, b: {b_ave}, l: {l_ave}, f: {f_ave}")
        ratio = l_ave - r_ave*1.2
        rotation_flag = False
        if rotation_flag:
            speed.linear.x = -0.1
            speed.angular.z = -0.3
            if f_ave > 0.3:
                rotation_flag = False
        if r_ave < 0.40:
            speed.linear.x = 0.1
            speed.angular.z = 0.0 + ratio
        else:
            rotation_flag = True
        print(ratio)

def rover_controller():
    global speed

    rospy.init_node('rover_controller', anonymous=True)

    pub = rospy.Publisher('rover_drive',Twist, queue_size=1)

    rate = rospy.Rate(5)

    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)

    lidar_subscriber = rospy.Subscriber('scan', LaserScan, callback_laser)

    while not rospy.is_shutdown():
        rate.sleep()
        controller()
        pub.publish(speed)

if __name__ == '__main__':
    odom_subscriber = rospy.Subscriber('odom', Odometry, callback_odom)
    rover_controller()
